// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cp_lower_bound
NumericVector cp_lower_bound(NumericVector ys, NumericVector ns, double alpha);
RcppExport SEXP _calibrationband_cp_lower_bound(SEXP ysSEXP, SEXP nsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cp_lower_bound(ys, ns, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cp_upper_bound
NumericVector cp_upper_bound(NumericVector ys, NumericVector ns, double alpha);
RcppExport SEXP _calibrationband_cp_upper_bound(SEXP ysSEXP, SEXP nsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cp_upper_bound(ys, ns, alpha));
    return rcpp_result_gen;
END_RCPP
}
// lower_bound
NumericVector lower_bound(NumericVector isoy, NumericVector cc, IntegerVector part_lwr, IntegerVector ind_to_block);
RcppExport SEXP _calibrationband_lower_bound(SEXP isoySEXP, SEXP ccSEXP, SEXP part_lwrSEXP, SEXP ind_to_blockSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type isoy(isoySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type part_lwr(part_lwrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ind_to_block(ind_to_blockSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_bound(isoy, cc, part_lwr, ind_to_block));
    return rcpp_result_gen;
END_RCPP
}
// upper_bound
NumericVector upper_bound(NumericVector isoy, NumericVector cc, IntegerVector part_upr, IntegerVector ind_to_block);
RcppExport SEXP _calibrationband_upper_bound(SEXP isoySEXP, SEXP ccSEXP, SEXP part_uprSEXP, SEXP ind_to_blockSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type isoy(isoySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type part_upr(part_uprSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ind_to_block(ind_to_blockSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_bound(isoy, cc, part_upr, ind_to_block));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_calibrationband_cp_lower_bound", (DL_FUNC) &_calibrationband_cp_lower_bound, 3},
    {"_calibrationband_cp_upper_bound", (DL_FUNC) &_calibrationband_cp_upper_bound, 3},
    {"_calibrationband_lower_bound", (DL_FUNC) &_calibrationband_lower_bound, 4},
    {"_calibrationband_upper_bound", (DL_FUNC) &_calibrationband_upper_bound, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_calibrationband(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
